package ru.clevertec.cachestarter.exploitation;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import ru.clevertec.cachestarter.annotation.Caching;

import java.lang.reflect.Proxy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * The Postprocessor determines which beans will be wrapped in a proxy for further caching of their methods
 */
@RequiredArgsConstructor
public class CachePostProcessor implements BeanPostProcessor {

    private final CacheManager cacheManager;
    private final Map<String, Class<?>> beanClasses = new HashMap<>();

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        if (Arrays.stream(bean.getClass().getDeclaredMethods())
                .anyMatch(m -> m.isAnnotationPresent(Caching.class))) {
            beanClasses.put(beanName, bean.getClass());
        }
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        Class<?> beanClass = beanClasses.get(beanName);
        return beanClass != null ? Proxy.newProxyInstance(beanClass.getClassLoader(), beanClass.getInterfaces(),
                (o, method, objects) -> beanClass.getMethod(method.getName(), method.getParameterTypes())
                        .isAnnotationPresent(Caching.class) ? cacheManager.getResult(
                        beanClasses.get(beanName).getMethod(method.getName(), method.getParameterTypes()),
                        method,
                        bean,
                        objects) :
                        method.invoke(bean, objects)) : bean;
    }

}