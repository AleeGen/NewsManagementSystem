package ru.clevertec.cachestarter.exploitation;

import lombok.experimental.UtilityClass;
import ru.clevertec.cachestarter.cache.Algorithm;
import ru.clevertec.cachestarter.cache.Cache;
import ru.clevertec.cachestarter.cache.impl.LFUCache;
import ru.clevertec.cachestarter.cache.impl.LRUCache;

@UtilityClass
public class CacheFactory {

    /**
     * Returns a specific cache implementation depending on the specified parameters
     *
     * @param algorithm LFU or LRU
     * @param capacity  cache memory
     * @return a specific cache implementation
     * @throws IllegalArgumentException if the capacity value is less than 1
     */
    public static Cache<Object, Object> getCache(Algorithm algorithm, int capacity) {
        if (capacity < 1) {
            throw new IllegalArgumentException("The cache capacity must be more than " + capacity);
        }
        return switch (algorithm) {
            case LFU -> new LFUCache<>(capacity);
            case LRU -> new LRUCache<>(capacity);
        };
    }

}