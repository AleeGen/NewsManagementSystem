package ru.clevertec.loggingstarter.exploitation;

import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.SpyBean;
import ru.clevertec.loggingstarter.annotation.Logging;
import ru.clevertec.loggingstarter.config.LoggingAutoConfiguration;
import ru.clevertec.loggingstarter.data.OnClassLogging;
import ru.clevertec.loggingstarter.data.OnMethodLogging;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;

@ImportAutoConfiguration(AopAutoConfiguration.class)
@SpringBootTest(classes = {LoggingAutoConfiguration.class, OnClassLogging.class, OnMethodLogging.class},
        properties = {"ru.clevertec.logging.enabled=true"})
public class LoggingAspectTest {

    @SpyBean
    private LoggingAspect loggingAspect;

    @Autowired
    private OnClassLogging onClassLogging;

    @Autowired
    private OnMethodLogging onMethodLogging;

    @Nested
    class CheckOnClassLoggingShouldCall {

        @Test
        void checkBefore() {
            onClassLogging.method("data");
            verify(loggingAspect).beforeOnClass(
                    any(JoinPoint.class),
                    any(Logging.class),
                    any(Object.class));
        }

        @Test
        void checkAfter() {
            onClassLogging.method("data");
            verify(loggingAspect).afterOnClass(
                    any(JoinPoint.class),
                    any(Object.class),
                    any(Logging.class),
                    any(Object.class));
        }

    }

    @Nested
    class CheckOnMethodLoggingShouldCall {

        @Test
        void checkBefore() {
            onMethodLogging.method("data");
            verify(loggingAspect).beforeOnMethod(
                    any(JoinPoint.class),
                    any(Logging.class),
                    any(Object.class));
        }

        @Test
        void checkAfter() {
            onMethodLogging.method("data");
            verify(loggingAspect).afterOnMethod(
                    any(JoinPoint.class),
                    any(Object.class),
                    any(Logging.class),
                    any(Object.class));
        }

    }

}