package ru.clevertec.loggingstarter.exploitation;

import lombok.RequiredArgsConstructor;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.event.Level;
import ru.clevertec.loggingstarter.annotation.Logging;

import java.util.Arrays;
import java.util.Map;

@Aspect
@RequiredArgsConstructor
public class LoggingAspect {

    private final Map<Class<?>, Logger> logMap;

    @Before("PointCuts.onClass() && @within(logging) && target(target)")
    public void beforeOnClass(JoinPoint joinPoint,
                              Logging logging,
                              Object target) {
        logBefore(joinPoint, logging, target);
    }

    @Before("PointCuts.onMethod() && @annotation(logging) && target(target)")
    public void beforeOnMethod(JoinPoint joinPoint,
                               Logging logging,
                               Object target) {
        logBefore(joinPoint, logging, target);
    }

    @AfterReturning(
            value = "PointCuts.onClass() && @within(logging) && target(target)",
            returning = "result",
            argNames = "joinPoint,result,logging,target")
    public void afterOnClass(JoinPoint joinPoint,
                             Object result,
                             Logging logging,
                             Object target) {
        logAfter(joinPoint, result, logging, target);
    }

    @AfterReturning(
            value = "PointCuts.onMethod() && @annotation(logging) && target(target)",
            returning = "result",
            argNames = "joinPoint,result,logging,target")
    public void afterOnMethod(JoinPoint joinPoint,
                              Object result,
                              Logging logging,
                              Object target) {
        logAfter(joinPoint, result, logging, target);
    }

    private void logBefore(JoinPoint joinPoint,
                           Logging logging,
                           Object target) {
        Logger log = logMap.get(target.getClass());
        Level level = Level.valueOf(logging.level().name());
        String param = Arrays.toString(joinPoint.getArgs());
        log.atLevel(level).log(String.format("Request: method '%s' with parameters '%s'", joinPoint.getSignature(), param));
    }

    private void logAfter(JoinPoint joinPoint,
                          Object result,
                          Logging logging,
                          Object target) {
        Logger log = logMap.get(target.getClass());
        Level level = Level.valueOf(logging.level().name());
        log.atLevel(level).log(String.format("Response: method '%s' returned '%s'", joinPoint.getSignature(), result));
    }

}