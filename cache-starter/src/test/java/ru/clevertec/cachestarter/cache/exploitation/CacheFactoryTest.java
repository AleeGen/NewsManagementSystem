package ru.clevertec.cachestarter.cache.exploitation;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.platform.commons.util.ReflectionUtils;
import ru.clevertec.cachestarter.cache.Algorithm;
import ru.clevertec.cachestarter.cache.impl.LFUCache;
import ru.clevertec.cachestarter.cache.impl.LRUCache;
import ru.clevertec.cachestarter.exploitation.CacheFactory;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.assertj.core.api.Assertions.assertThat;

class CacheFactoryTest {

    private static Stream<Arguments> forException() {
        return Stream.of(
                Arguments.of(Algorithm.LFU, 0),
                Arguments.of(Algorithm.LRU, -1));
    }

    private static Stream<Arguments> args() {
        return Stream.of(
                Arguments.of(Algorithm.LFU, 1),
                Arguments.of(Algorithm.LRU, 5),
                Arguments.of(Algorithm.LRU, 20));
    }

    @Test
    void shouldThrowUnsupportedOperationException() {
        var constructor = ReflectionUtils.getDeclaredConstructor(CacheFactory.class);
        assertThrows(UnsupportedOperationException.class, () -> ReflectionUtils.newInstance(constructor));
    }

    @ParameterizedTest
    @MethodSource("forException")
    void shouldThrowIllegalArgumentException(Algorithm algorithm, int capacity) {
        assertThrows(IllegalArgumentException.class, () -> CacheFactory.getCache(algorithm, capacity));
    }

    @Test
    void shouldReturnLRUCache() {
        var cache = CacheFactory.getCache(Algorithm.LRU, 1);
        assertThat(cache).isOfAnyClassIn(LRUCache.class);
    }

    @Test
    void shouldReturnLFUCache() {
        var cache = CacheFactory.getCache(Algorithm.LFU, 1);
        assertThat(cache).isOfAnyClassIn(LFUCache.class);
    }

    @ParameterizedTest
    @MethodSource("args")
    void shouldReturnWithExpectedCapacity(Algorithm algorithm, int capacity) {
        var cache = CacheFactory.getCache(algorithm, capacity);
        assertThat(cache.getCapacity()).isEqualTo(capacity);
    }

}